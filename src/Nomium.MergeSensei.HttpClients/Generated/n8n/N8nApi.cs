// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

#nullable enable annotations

namespace N8n.PublicApi
{
    /// <summary>Generate an audit</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.1.0")]
    public partial interface IAuditApi
    {
        /// <summary>Generate an audit</summary>
        /// <remarks>Generate a security audit for your n8n instance.</remarks>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>500</term>
        /// <description>Internal server error.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/audit")]
        Task<Audit> Audit([Body] Body? body = default, CancellationToken cancellationToken = default);
    }

    /// <summary>Create a credential</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.1.0")]
    public partial interface ICredentialApi
    {
        /// <summary>Create a credential</summary>
        /// <remarks>Creates a credential that can be used by nodes of the specified type.</remarks>
        /// <param name="body">Credential to be created.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>415</term>
        /// <description>Unsupported media type.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/credentials")]
        Task<CreateCredentialResponse> Credentials([Body] Credential body, CancellationToken cancellationToken = default);

        /// <summary>Delete credential by ID</summary>
        /// <remarks>Deletes a credential from your instance. You must be the owner of the credentials</remarks>
        /// <param name="id">The credential ID that needs to be deleted</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Delete("/credentials/{id}")]
        Task<Credential> DeleteCredential(string id, CancellationToken cancellationToken = default);

        /// <summary>Show credential data schema</summary>
        /// <param name="credentialTypeName">The credential type name that you want to get the schema for</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/credentials/schema/{credentialTypeName}")]
        Task<object> Schema(string credentialTypeName, CancellationToken cancellationToken = default);
    }

    /// <summary>Retrieve all executions</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.1.0")]
    public partial interface IExecutionApi
    {
        /// <summary>Retrieve all executions</summary>
        /// <remarks>Retrieve all executions from your instance.</remarks>
        /// <param name="includeData">Whether or not to include the execution's detailed data.</param>
        /// <param name="status">Status to filter the executions by.</param>
        /// <param name="workflowId">Workflow to filter the executions by.</param>
        /// <param name="limit">The maximum number of items to return.</param>
        /// <param name="cursor">Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/executions")]
        Task<ExecutionList> ExecutionsGET([Query] bool? includeData = default, [Query] Status? status = default, [Query] string? workflowId = default, [Query] string? projectId = default, [Query] double? limit = default, [Query] string? cursor = default, CancellationToken cancellationToken = default);

        /// <summary>Retrieve an execution</summary>
        /// <remarks>Retrieve an execution from your instance.</remarks>
        /// <param name="id">The ID of the execution.</param>
        /// <param name="includeData">Whether or not to include the execution's detailed data.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/executions/{id}")]
        Task<Execution> ExecutionsGET2(double id, [Query] bool? includeData = default, CancellationToken cancellationToken = default);

        /// <summary>Delete an execution</summary>
        /// <remarks>Deletes an execution from your instance.</remarks>
        /// <param name="id">The ID of the execution.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Delete("/executions/{id}")]
        Task<Execution> ExecutionsDELETE(double id, CancellationToken cancellationToken = default);
    }

    /// <summary>Create a tag</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.1.0")]
    public partial interface ITagsApi
    {
        /// <summary>Create a tag</summary>
        /// <remarks>Create a tag in your instance.</remarks>
        /// <param name="body">Created tag object.</param>
        /// <returns>A tag object</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/tags")]
        Task<Tag> TagsPOST([Body] Tag body, CancellationToken cancellationToken = default);

        /// <summary>Retrieve all tags</summary>
        /// <remarks>Retrieve all tags from your instance.</remarks>
        /// <param name="limit">The maximum number of items to return.</param>
        /// <param name="cursor">Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/tags")]
        Task<TagList> TagsGET([Query] double? limit = default, [Query] string? cursor = default, CancellationToken cancellationToken = default);

        /// <summary>Retrieves a tag</summary>
        /// <remarks>Retrieves a tag.</remarks>
        /// <param name="id">The ID of the tag.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/tags/{id}")]
        Task<Tag> TagsGET2(string id, CancellationToken cancellationToken = default);

        /// <summary>Delete a tag</summary>
        /// <remarks>Deletes a tag.</remarks>
        /// <param name="id">The ID of the tag.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Delete("/tags/{id}")]
        Task<Tag> TagsDELETE(string id, CancellationToken cancellationToken = default);

        /// <summary>Update a tag</summary>
        /// <remarks>Update a tag.</remarks>
        /// <param name="id">The ID of the tag.</param>
        /// <param name="body">Updated tag object.</param>
        /// <returns>Tag object</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Put("/tags/{id}")]
        Task<Tag> TagsPUT(string id, [Body] Tag body, CancellationToken cancellationToken = default);
    }

    /// <summary>Create a workflow</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.1.0")]
    public partial interface IWorkflowApi
    {
        /// <summary>Create a workflow</summary>
        /// <remarks>Create a workflow in your instance.</remarks>
        /// <param name="body">Created workflow object.</param>
        /// <returns>A workflow object</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/workflows")]
        Task<Workflow> WorkflowsPOST([Body] Workflow body, CancellationToken cancellationToken = default);

        /// <summary>Retrieve all workflows</summary>
        /// <remarks>Retrieve all workflows from your instance.</remarks>
        /// <param name="excludePinnedData">Set this to avoid retrieving pinned data</param>
        /// <param name="limit">The maximum number of items to return.</param>
        /// <param name="cursor">Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/workflows")]
        Task<WorkflowList> WorkflowsGET([Query] bool? active = default, [Query] string? tags = default, [Query] string? name = default, [Query] string? projectId = default, [Query] bool? excludePinnedData = default, [Query] double? limit = default, [Query] string? cursor = default, CancellationToken cancellationToken = default);

        /// <summary>Retrieves a workflow</summary>
        /// <remarks>Retrieves a workflow.</remarks>
        /// <param name="excludePinnedData">Set this to avoid retrieving pinned data</param>
        /// <param name="id">The ID of the workflow.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/workflows/{id}")]
        Task<Workflow> WorkflowsGET2(string id, [Query] bool? excludePinnedData = default, CancellationToken cancellationToken = default);

        /// <summary>Delete a workflow</summary>
        /// <remarks>Deletes a workflow.</remarks>
        /// <param name="id">The ID of the workflow.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Delete("/workflows/{id}")]
        Task<Workflow> WorkflowsDELETE(string id, CancellationToken cancellationToken = default);

        /// <summary>Update a workflow</summary>
        /// <remarks>Update a workflow.</remarks>
        /// <param name="id">The ID of the workflow.</param>
        /// <param name="body">Updated workflow object.</param>
        /// <returns>Workflow object</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Put("/workflows/{id}")]
        Task<Workflow> WorkflowsPUT(string id, [Body] Workflow body, CancellationToken cancellationToken = default);

        /// <summary>Activate a workflow</summary>
        /// <remarks>Active a workflow.</remarks>
        /// <param name="id">The ID of the workflow.</param>
        /// <returns>Workflow object</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/workflows/{id}/activate")]
        Task<Workflow> Activate(string id, CancellationToken cancellationToken = default);

        /// <summary>Deactivate a workflow</summary>
        /// <remarks>Deactivate a workflow.</remarks>
        /// <param name="id">The ID of the workflow.</param>
        /// <returns>Workflow object</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/workflows/{id}/deactivate")]
        Task<Workflow> Deactivate(string id, CancellationToken cancellationToken = default);

        /// <summary>Transfer a workflow to another project.</summary>
        /// <remarks>Transfer a workflow to another project.</remarks>
        /// <param name="id">The ID of the workflow.</param>
        /// <param name="body">Destination project information for the workflow transfer.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Content-Type: application/json")]
        [Put("/workflows/{id}/transfer")]
        Task Transfer(string id, [Body] Body2 body, CancellationToken cancellationToken = default);

        /// <summary>Transfer a credential to another project.</summary>
        /// <remarks>Transfer a credential to another project.</remarks>
        /// <param name="id">The ID of the credential.</param>
        /// <param name="body">Destination project for the credential transfer.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Content-Type: application/json")]
        [Put("/credentials/{id}/transfer")]
        Task Transfer2(string id, [Body] Body3 body, CancellationToken cancellationToken = default);

        /// <summary>Get workflow tags</summary>
        /// <remarks>Get workflow tags.</remarks>
        /// <param name="id">The ID of the workflow.</param>
        /// <returns>List of tags</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/workflows/{id}/tags")]
        Task<ICollection<Tag>> TagsAllGET(string id, CancellationToken cancellationToken = default);

        /// <summary>Update tags of a workflow</summary>
        /// <remarks>Update tags of a workflow.</remarks>
        /// <param name="id">The ID of the workflow.</param>
        /// <param name="body">List of tags</param>
        /// <returns>List of tags after add the tag</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Put("/workflows/{id}/tags")]
        Task<ICollection<Tag>> TagsAllPUT(string id, [Body] IEnumerable<Anonymous> body, CancellationToken cancellationToken = default);
    }

    /// <summary>Retrieve all users</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.1.0")]
    public partial interface IUserApi
    {
        /// <summary>Retrieve all users</summary>
        /// <remarks>Retrieve all users from your instance. Only available for the instance owner.</remarks>
        /// <param name="limit">The maximum number of items to return.</param>
        /// <param name="cursor">Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail.</param>
        /// <param name="includeRole">Whether to include the user's role or not.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/users")]
        Task<UserList> UsersGET([Query] double? limit = default, [Query] string? cursor = default, [Query] bool? includeRole = default, [Query] string? projectId = default, CancellationToken cancellationToken = default);

        /// <summary>Create multiple users</summary>
        /// <remarks>Create one or more users.</remarks>
        /// <param name="body">Array of users to be created.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/users")]
        Task<Response> UsersPOST([Body] IEnumerable<Anonymous2> body, CancellationToken cancellationToken = default);

        /// <summary>Get user by ID/Email</summary>
        /// <remarks>Retrieve a user from your instance. Only available for the instance owner.</remarks>
        /// <param name="id">The ID or email of the user.</param>
        /// <param name="includeRole">Whether to include the user's role or not.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/users/{id}")]
        Task<User> UsersGET2(string id, [Query] bool? includeRole = default, CancellationToken cancellationToken = default);

        /// <summary>Delete a user</summary>
        /// <remarks>Delete a user from your instance.</remarks>
        /// <param name="id">The ID or email of the user.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Delete("/users/{id}")]
        Task UsersDELETE(string id, CancellationToken cancellationToken = default);

        /// <summary>Change a user's global role</summary>
        /// <remarks>Change a user's global role</remarks>
        /// <param name="id">The ID or email of the user.</param>
        /// <param name="body">New role for the user</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Content-Type: application/json")]
        [Patch("/users/{id}/role")]
        Task Role(string id, [Body] Body4 body, CancellationToken cancellationToken = default);
    }

    /// <summary>Pull changes from the remote repository</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.1.0")]
    public partial interface ISourceControlApi
    {
        /// <summary>Pull changes from the remote repository</summary>
        /// <remarks>Requires the Source Control feature to be licensed and connected to a repository.</remarks>
        /// <param name="body">Pull options</param>
        /// <returns>Import result</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/source-control/pull")]
        Task<ImportResult> Pull([Body] Pull body, CancellationToken cancellationToken = default);
    }

    /// <summary>Create a variable</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.1.0")]
    public partial interface IVariablesApi
    {
        /// <summary>Create a variable</summary>
        /// <remarks>Create a variable in your instance.</remarks>
        /// <param name="body">Payload for variable to create.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Content-Type: application/json")]
        [Post("/variables")]
        Task VariablesPOST([Body] Variable body, CancellationToken cancellationToken = default);

        /// <summary>Retrieve variables</summary>
        /// <remarks>Retrieve variables from your instance.</remarks>
        /// <param name="limit">The maximum number of items to return.</param>
        /// <param name="cursor">Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/variables")]
        Task<VariableList> VariablesGET([Query] double? limit = default, [Query] string? cursor = default, CancellationToken cancellationToken = default);

        /// <summary>Delete a variable</summary>
        /// <remarks>Delete a variable from your instance.</remarks>
        /// <param name="id">The ID of the variable.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Delete("/variables/{id}")]
        Task VariablesDELETE(string id, CancellationToken cancellationToken = default);

        /// <summary>Update a variable</summary>
        /// <remarks>Update a variable from your instance.</remarks>
        /// <param name="body">Payload for variable to update.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Content-Type: application/json")]
        [Put("/variables/{id}")]
        Task VariablesPUT([Body] Variable body, CancellationToken cancellationToken = default);
    }

    /// <summary>Create a project</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.1.0")]
    public partial interface IProjectsApi
    {
        /// <summary>Create a project</summary>
        /// <remarks>Create a project on your instance.</remarks>
        /// <param name="body">Payload for project to create.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Content-Type: application/json")]
        [Post("/projects")]
        Task ProjectsPOST([Body] Project body, CancellationToken cancellationToken = default);

        /// <summary>Retrieve projects</summary>
        /// <remarks>Retrieve projects from your instance.</remarks>
        /// <param name="limit">The maximum number of items to return.</param>
        /// <param name="cursor">Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail.</param>
        /// <returns>Operation successful.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/projects")]
        Task<ProjectList> ProjectsGET([Query] double? limit = default, [Query] string? cursor = default, CancellationToken cancellationToken = default);

        /// <summary>Delete a project</summary>
        /// <remarks>Delete a project from your instance.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Delete("/projects/{projectId}")]
        Task ProjectsDELETE(string projectId, CancellationToken cancellationToken = default);

        /// <summary>Update a project</summary>
        /// <remarks>Update a project on your instance.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="body">Updated project object.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>The request is invalid or provides malformed data.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Content-Type: application/json")]
        [Put("/projects/{projectId}")]
        Task ProjectsPUT(string projectId, [Body] Project body, CancellationToken cancellationToken = default);

        /// <summary>Add one or more users to a project</summary>
        /// <remarks>Add one or more users to a project on your instance.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="body">Payload containing an array of one or more users to add to the project.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Content-Type: application/json")]
        [Post("/projects/{projectId}/users")]
        Task UsersPOST2(string projectId, [Body] Body5? body = default, CancellationToken cancellationToken = default);

        /// <summary>Delete a user from a project</summary>
        /// <remarks>Delete a user from a project on your instance.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Delete("/projects/{projectId}/users/{userId}")]
        Task UsersDELETE2(string projectId, string userId, CancellationToken cancellationToken = default);

        /// <summary>Change a user's role in a project</summary>
        /// <remarks>Change a user's role in a project.</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">Payload containing the new role to assign to the project user.</param>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The specified resource was not found.</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Content-Type: application/json")]
        [Patch("/projects/{projectId}/users/{userId}")]
        Task UsersPATCH(string projectId, string userId, [Body] Body6? body = default, CancellationToken cancellationToken = default);
    }

}

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace N8n.PublicApi
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Audit
    {

        [JsonPropertyName("Credentials Risk Report")]
        public object CredentialsRiskReport { get; set; }

        [JsonPropertyName("Database Risk Report")]
        public object DatabaseRiskReport { get; set; }

        [JsonPropertyName("Filesystem Risk Report")]
        public object FilesystemRiskReport { get; set; }

        [JsonPropertyName("Nodes Risk Report")]
        public object NodesRiskReport { get; set; }

        [JsonPropertyName("Instance Risk Report")]
        public object InstanceRiskReport { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Credential
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Data { get; set; } = new object();

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCredentialResponse
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }

        [JsonPropertyName("updatedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset UpdatedAt { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Execution
    {

        [JsonPropertyName("id")]
        public double Id { get; set; }

        [JsonPropertyName("data")]
        public object Data { get; set; }

        [JsonPropertyName("finished")]
        public bool Finished { get; set; }

        [JsonPropertyName("mode")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ExecutionMode Mode { get; set; }

        [JsonPropertyName("retryOf")]
        public double? RetryOf { get; set; }

        [JsonPropertyName("retrySuccessId")]
        public double? RetrySuccessId { get; set; }

        [JsonPropertyName("startedAt")]
        public System.DateTimeOffset StartedAt { get; set; }

        [JsonPropertyName("stoppedAt")]
        public System.DateTimeOffset StoppedAt { get; set; }

        [JsonPropertyName("workflowId")]
        public double WorkflowId { get; set; }

        [JsonPropertyName("waitTill")]
        public System.DateTimeOffset? WaitTill { get; set; }

        [JsonPropertyName("customData")]
        public object CustomData { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExecutionList
    {

        [JsonPropertyName("data")]
        public ICollection<Execution> Data { get; set; }

        /// <summary>
        /// Paginate through executions by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
        /// </summary>

        [JsonPropertyName("nextCursor")]
        public string NextCursor { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tag
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagList
    {

        [JsonPropertyName("data")]
        public ICollection<Tag> Data { get; set; }

        /// <summary>
        /// Paginate through tags by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
        /// </summary>

        [JsonPropertyName("nextCursor")]
        public string NextCursor { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Node
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("webhookId")]
        public string WebhookId { get; set; }

        [JsonPropertyName("disabled")]
        public bool Disabled { get; set; }

        [JsonPropertyName("notesInFlow")]
        public bool NotesInFlow { get; set; }

        [JsonPropertyName("notes")]
        public string Notes { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("typeVersion")]
        public double TypeVersion { get; set; }

        [JsonPropertyName("executeOnce")]
        public bool ExecuteOnce { get; set; }

        [JsonPropertyName("alwaysOutputData")]
        public bool AlwaysOutputData { get; set; }

        [JsonPropertyName("retryOnFail")]
        public bool RetryOnFail { get; set; }

        [JsonPropertyName("maxTries")]
        public double MaxTries { get; set; }

        [JsonPropertyName("waitBetweenTries")]
        public double WaitBetweenTries { get; set; }

        /// <summary>
        /// use onError instead
        /// </summary>

        [JsonPropertyName("continueOnFail")]
        [System.Obsolete]
        public bool ContinueOnFail { get; set; }

        [JsonPropertyName("onError")]
        public string OnError { get; set; }

        [JsonPropertyName("position")]
        public ICollection<double> Position { get; set; }

        [JsonPropertyName("parameters")]
        public object Parameters { get; set; }

        [JsonPropertyName("credentials")]
        public object Credentials { get; set; }

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowSettings
    {

        [JsonPropertyName("saveExecutionProgress")]
        public bool SaveExecutionProgress { get; set; }

        [JsonPropertyName("saveManualExecutions")]
        public bool SaveManualExecutions { get; set; }

        [JsonPropertyName("saveDataErrorExecution")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public WorkflowSettingsSaveDataErrorExecution SaveDataErrorExecution { get; set; }

        [JsonPropertyName("saveDataSuccessExecution")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public WorkflowSettingsSaveDataSuccessExecution SaveDataSuccessExecution { get; set; }

        [JsonPropertyName("executionTimeout")]
        public double ExecutionTimeout { get; set; }

        /// <summary>
        /// The ID of the workflow that contains the error trigger node.
        /// </summary>

        [JsonPropertyName("errorWorkflow")]
        public string ErrorWorkflow { get; set; }

        [JsonPropertyName("timezone")]
        public string Timezone { get; set; }

        [JsonPropertyName("executionOrder")]
        public string ExecutionOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Workflow
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        [JsonPropertyName("nodes")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Node> Nodes { get; set; } = new System.Collections.ObjectModel.Collection<Node>();

        [JsonPropertyName("connections")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Connections { get; set; } = new object();

        [JsonPropertyName("settings")]
        [System.ComponentModel.DataAnnotations.Required]
        public WorkflowSettings Settings { get; set; } = new WorkflowSettings();

        [JsonPropertyName("staticData")]
        public StaticData StaticData { get; set; }

        [JsonPropertyName("tags")]
        public ICollection<Tag> Tags { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowList
    {

        [JsonPropertyName("data")]
        public ICollection<Workflow> Data { get; set; }

        /// <summary>
        /// Paginate through workflows by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
        /// </summary>

        [JsonPropertyName("nextCursor")]
        public string NextCursor { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowTags : System.Collections.ObjectModel.Collection<Tag>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagIds : System.Collections.ObjectModel.Collection<Anonymous>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        /// <summary>
        /// User's first name
        /// </summary>

        [JsonPropertyName("firstName")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string FirstName { get; set; }

        /// <summary>
        /// User's last name
        /// </summary>

        [JsonPropertyName("lastName")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string LastName { get; set; }

        /// <summary>
        /// Whether the user finished setting up their account in response to the invitation (true) or not (false).
        /// </summary>

        [JsonPropertyName("isPending")]
        public bool IsPending { get; set; }

        /// <summary>
        /// Time the user was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Last time the user was updated.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        [JsonPropertyName("role")]
        public string Role { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserList
    {

        [JsonPropertyName("data")]
        public ICollection<User> Data { get; set; }

        /// <summary>
        /// Paginate through users by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
        /// </summary>

        [JsonPropertyName("nextCursor")]
        public string NextCursor { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pull
    {

        [JsonPropertyName("force")]
        public bool Force { get; set; }

        [JsonPropertyName("variables")]
        public object Variables { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportResult
    {

        [JsonPropertyName("variables")]
        public Variables Variables { get; set; }

        [JsonPropertyName("credentials")]
        public ICollection<Credentials> Credentials { get; set; }

        [JsonPropertyName("workflows")]
        public ICollection<Workflows> Workflows { get; set; }

        [JsonPropertyName("tags")]
        public Tags Tags { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Variable
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableList
    {

        [JsonPropertyName("data")]
        public ICollection<Variable> Data { get; set; }

        /// <summary>
        /// Paginate through variables by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
        /// </summary>

        [JsonPropertyName("nextCursor")]
        public string NextCursor { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Project
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectList
    {

        [JsonPropertyName("data")]
        public ICollection<Project> Data { get; set; }

        /// <summary>
        /// Paginate through projects by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
        /// </summary>

        [JsonPropertyName("nextCursor")]
        public string NextCursor { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {

        [JsonPropertyName("code")]
        public string Code { get; set; }

        [JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Role
    {

        [JsonPropertyName("id")]
        public double Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Time the role was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Last time the role was updated.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CredentialType
    {

        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("default")]
        public string Default { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {

        [JsonPropertyName("additionalOptions")]
        public AdditionalOptions AdditionalOptions { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"success")]
        Success = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"waiting")]
        Waiting = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {
        /// <summary>
        /// The ID of the project to transfer the workflow to.
        /// </summary>

        [JsonPropertyName("destinationProjectId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DestinationProjectId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body3
    {
        /// <summary>
        /// The ID of the project to transfer the credential to.
        /// </summary>

        [JsonPropertyName("destinationProjectId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DestinationProjectId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {

        [JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous2
    {

        [JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [JsonPropertyName("role")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Role2 Role { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body4
    {

        [JsonPropertyName("newRoleName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Body4NewRoleName NewRoleName { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body5
    {
        /// <summary>
        /// A list of userIds and roles to add to the project.
        /// </summary>

        [JsonPropertyName("relations")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Relations> Relations { get; set; } = new System.Collections.ObjectModel.Collection<Relations>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body6
    {
        /// <summary>
        /// The role assigned to the user in the project.
        /// </summary>

        [JsonPropertyName("role")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Role { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {

        [JsonPropertyName("user")]
        public User2 User { get; set; }

        [JsonPropertyName("error")]
        public string Error { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExecutionMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"cli")]
        Cli = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"integrated")]
        Integrated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"internal")]
        Internal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"retry")]
        Retry = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"trigger")]
        Trigger = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"webhook")]
        Webhook = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorkflowSettingsSaveDataErrorExecution
    {

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorkflowSettingsSaveDataSuccessExecution
    {

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StaticData
    {

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Variables
    {

        [JsonPropertyName("added")]
        public ICollection<string> Added { get; set; }

        [JsonPropertyName("changed")]
        public ICollection<string> Changed { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Credentials
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Workflows
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tags
    {

        [JsonPropertyName("tags")]
        public ICollection<tags> Tags1 { get; set; }

        [JsonPropertyName("mappings")]
        public ICollection<Mappings> Mappings { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalOptions
    {
        /// <summary>
        /// Days for a workflow to be considered abandoned if not executed
        /// </summary>

        [JsonPropertyName("daysAbandonedWorkflow")]
        public int DaysAbandonedWorkflow { get; set; }

        [JsonPropertyName("categories")]

        // TODO(system.text.json): Add string enum item converter
        public ICollection<Categories> Categories { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Role2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"global:admin")]
        GlobalAdmin = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"global:member")]
        GlobalMember = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body4NewRoleName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"global:admin")]
        GlobalAdmin = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"global:member")]
        GlobalMember = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Relations
    {
        /// <summary>
        /// The unique identifier of the user.
        /// </summary>

        [JsonPropertyName("userId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserId { get; set; }

        /// <summary>
        /// The role assigned to the user in the project.
        /// </summary>

        [JsonPropertyName("role")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Role { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User2
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("email")]
        public string Email { get; set; }

        [JsonPropertyName("inviteAcceptUrl")]
        public string InviteAcceptUrl { get; set; }

        [JsonPropertyName("emailSent")]
        public bool EmailSent { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tags
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mappings
    {

        [JsonPropertyName("workflowId")]
        public string WorkflowId { get; set; }

        [JsonPropertyName("tagId")]
        public string TagId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Categories
    {

        [System.Runtime.Serialization.EnumMember(Value = @"credentials")]
        Credentials = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"database")]
        Database = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"nodes")]
        Nodes = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"filesystem")]
        Filesystem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"instance")]
        Instance = 4,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625


#nullable enable
namespace N8n.PublicApi
{
    using System;
   using Microsoft.Extensions.DependencyInjection;
   using Polly;
   using Polly.Contrib.WaitAndRetry;
   using Polly.Extensions.Http;
   using Refit;

    public static partial class IServiceCollectionExtensions
    {
        public static IServiceCollection ConfigureRefitClients(
            this IServiceCollection services, 
            Action<IHttpClientBuilder>? builder = default, 
            RefitSettings? settings = default)
        {
            var clientBuilderIAuditApi = services
                .AddRefitClient<IAuditApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://n8n.nomium.dev/api/v1"));

            clientBuilderIAuditApi
                .AddPolicyHandler(
                    HttpPolicyExtensions
                        .HandleTransientHttpError()
                        .WaitAndRetryAsync(
                            Backoff.DecorrelatedJitterBackoffV2(
                                TimeSpan.FromSeconds(0.5),
                                3)));

            builder?.Invoke(clientBuilderIAuditApi);

            var clientBuilderICredentialApi = services
                .AddRefitClient<ICredentialApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://n8n.nomium.dev/api/v1"));

            clientBuilderICredentialApi
                .AddPolicyHandler(
                    HttpPolicyExtensions
                        .HandleTransientHttpError()
                        .WaitAndRetryAsync(
                            Backoff.DecorrelatedJitterBackoffV2(
                                TimeSpan.FromSeconds(0.5),
                                3)));

            builder?.Invoke(clientBuilderICredentialApi);

            var clientBuilderIExecutionApi = services
                .AddRefitClient<IExecutionApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://n8n.nomium.dev/api/v1"));

            clientBuilderIExecutionApi
                .AddPolicyHandler(
                    HttpPolicyExtensions
                        .HandleTransientHttpError()
                        .WaitAndRetryAsync(
                            Backoff.DecorrelatedJitterBackoffV2(
                                TimeSpan.FromSeconds(0.5),
                                3)));

            builder?.Invoke(clientBuilderIExecutionApi);

            var clientBuilderITagsApi = services
                .AddRefitClient<ITagsApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://n8n.nomium.dev/api/v1"));

            clientBuilderITagsApi
                .AddPolicyHandler(
                    HttpPolicyExtensions
                        .HandleTransientHttpError()
                        .WaitAndRetryAsync(
                            Backoff.DecorrelatedJitterBackoffV2(
                                TimeSpan.FromSeconds(0.5),
                                3)));

            builder?.Invoke(clientBuilderITagsApi);

            var clientBuilderIWorkflowApi = services
                .AddRefitClient<IWorkflowApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://n8n.nomium.dev/api/v1"));

            clientBuilderIWorkflowApi
                .AddPolicyHandler(
                    HttpPolicyExtensions
                        .HandleTransientHttpError()
                        .WaitAndRetryAsync(
                            Backoff.DecorrelatedJitterBackoffV2(
                                TimeSpan.FromSeconds(0.5),
                                3)));

            builder?.Invoke(clientBuilderIWorkflowApi);

            var clientBuilderIUserApi = services
                .AddRefitClient<IUserApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://n8n.nomium.dev/api/v1"));

            clientBuilderIUserApi
                .AddPolicyHandler(
                    HttpPolicyExtensions
                        .HandleTransientHttpError()
                        .WaitAndRetryAsync(
                            Backoff.DecorrelatedJitterBackoffV2(
                                TimeSpan.FromSeconds(0.5),
                                3)));

            builder?.Invoke(clientBuilderIUserApi);

            var clientBuilderISourceControlApi = services
                .AddRefitClient<ISourceControlApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://n8n.nomium.dev/api/v1"));

            clientBuilderISourceControlApi
                .AddPolicyHandler(
                    HttpPolicyExtensions
                        .HandleTransientHttpError()
                        .WaitAndRetryAsync(
                            Backoff.DecorrelatedJitterBackoffV2(
                                TimeSpan.FromSeconds(0.5),
                                3)));

            builder?.Invoke(clientBuilderISourceControlApi);

            var clientBuilderIVariablesApi = services
                .AddRefitClient<IVariablesApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://n8n.nomium.dev/api/v1"));

            clientBuilderIVariablesApi
                .AddPolicyHandler(
                    HttpPolicyExtensions
                        .HandleTransientHttpError()
                        .WaitAndRetryAsync(
                            Backoff.DecorrelatedJitterBackoffV2(
                                TimeSpan.FromSeconds(0.5),
                                3)));

            builder?.Invoke(clientBuilderIVariablesApi);

            var clientBuilderIProjectsApi = services
                .AddRefitClient<IProjectsApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("https://n8n.nomium.dev/api/v1"));

            clientBuilderIProjectsApi
                .AddPolicyHandler(
                    HttpPolicyExtensions
                        .HandleTransientHttpError()
                        .WaitAndRetryAsync(
                            Backoff.DecorrelatedJitterBackoffV2(
                                TimeSpan.FromSeconds(0.5),
                                3)));

            builder?.Invoke(clientBuilderIProjectsApi);

            return services;
        }
    }
}